name: .NET GitHub Workflow

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: false
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
        - prod
      skip_tests:
        description: 'Skip unit tests'
        required: false
        default: false
        type: boolean
      skip_sonar:
        description: 'Skip SonarQube analysis'
        required: false
        default: false
        type: boolean

env:
  # Project configuration
  DOTNET_VERSION: '8.0'
  SOLUTION_NAME: 'YourSolution'  # Update this with your actual solution name
  IMAGE_NAME: 'your-service'     # Update this with your actual image name
  
  # Registry configuration
  REGISTRY: 'harbor.use.ucdp.net'
  HARBOR_PROJECT: 'your-project' # Update this with your Harbor project

jobs:
  # Call the reusable service workflow from the pipeline-migration repository
  service-pipeline:
    name: .NET Service Pipeline
    uses: Universal-Destinations-Experiences/pipeline-migration/.github/workflows/reusable-service-dotnet.yml@main
    with:
      # Project-specific variables
      PROJ_SERVICE_NAME: ${{ env.IMAGE_NAME }}
      PROJ_K8S_NAMESPACE_BASE: ${{ env.HARBOR_PROJECT }}
      PROJ_HARBOR_DIRECTORY: ${{ env.HARBOR_PROJECT }}
      PROJ_SOLUTION_NAME: ${{ env.SOLUTION_NAME }}
      PROJ_IMAGE_NAME: ${{ env.REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}
      
      # Template variables
      TMPL_UNIT_TEST_IMAGE: mcr.microsoft.com/dotnet/sdk:${{ env.DOTNET_VERSION }}
      TMPL_SONAR_IMAGE: harbor.use.ucdp.net/utp_common/upr-dotnet-sonarqube-image:dotnet-sdk-${{ env.DOTNET_VERSION }}
      TMPL_DOCKER_FILE_PATH: './Dockerfile'
      
      # Quality gate overrides
      DEVOPS_QG_OVERRIDE_UNIT_TESTS: ${{ inputs.skip_tests && '1' || '0' }}
      DEVOPS_QG_OVERRIDE_SONAR_ANALYSIS: ${{ inputs.skip_sonar && '1' || '0' }}
      DEVOPS_QG_OVERRIDE_SMOKE_TESTS: '1'  # Disabled by default
      DEVOPS_QG_OVERRIDE_REGRESSION_TESTS: '1'  # Disabled by default
      
      # CI/CD control variables
      CI_COMMIT_BRANCH: ${{ github.ref_name }}
      CI_DEFAULT_BRANCH: 'main'
      CI_MERGE_REQUEST_ID: ${{ github.event.pull_request.number }}
      
    secrets:
      # GitHub token for accessing private repositories
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # GitLab integration (if needed)
      GITLAB_API_TOKEN: ${{ secrets.GITLAB_API_TOKEN }}
      
      # SonarQube configuration
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      # Harbor registry credentials
      HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
      HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}
      
      # Kubernetes configuration secrets for multi-cluster deployment
      SCRT_NONPROD_KUBE_CONFIG_B1A: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1A }}
      SCRT_NONPROD_KUBE_CONFIG_B1S3: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1S3 }}
      SCRT_NONPROD_KUBE_CONFIG_B1A_PCI: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1A_PCI }}
      SCRT_NONPROD_KUBE_CONFIG_B1S3_PCI: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1S3_PCI }}
      SCRT_NONPROD_KUBE_CONFIG_B1A_RKE2: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1A_RKE2 }}
      SCRT_NONPROD_KUBE_CONFIG_B1S3_RKE2: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1S3_RKE2 }}
      SCRT_NONPROD_KUBE_CONFIG_B1A_PCI_RKE2: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1A_PCI_RKE2 }}
      SCRT_NONPROD_KUBE_CONFIG_B1S3_PCI_RKE2: ${{ secrets.SCRT_NONPROD_KUBE_CONFIG_B1S3_PCI_RKE2 }}
      SCRT_PROD_KUBE_CONFIG_B1A: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1A }}
      SCRT_PROD_KUBE_CONFIG_B1S3: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1S3 }}
      SCRT_PROD_KUBE_CONFIG_B1A_PCI: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1A_PCI }}
      SCRT_PROD_KUBE_CONFIG_B1S3_PCI: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1S3_PCI }}
      SCRT_PROD_KUBE_CONFIG_B1A_RKE2: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1A_RKE2 }}
      SCRT_PROD_KUBE_CONFIG_B1S3_RKE2: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1S3_RKE2 }}
      SCRT_PROD_KUBE_CONFIG_B1A_PCI_RKE2: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1A_PCI_RKE2 }}
      SCRT_PROD_KUBE_CONFIG_B1S3_PCI_RKE2: ${{ secrets.SCRT_PROD_KUBE_CONFIG_B1S3_PCI_RKE2 }}

  # Summary job to provide workflow results
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: service-pipeline
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "## 🚀 .NET Service Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Name**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Solution**: ${{ env.SOLUTION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.HARBOR_PROJECT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Pipeline**: ${{ needs.service-pipeline.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.service-pipeline.result }}" == "success" ]]; then
            echo "✅ **Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.service-pipeline.result }}" == "failure" ]]; then
            echo "❌ **Pipeline failed. Please check the logs for details.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Pipeline completed with status: ${{ needs.service-pipeline.result }}**" >> $GITHUB_STEP_SUMMARY
          fi
